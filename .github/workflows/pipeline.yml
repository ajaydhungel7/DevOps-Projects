name: Build, Push Docker Image to ACR, and Deploy to AKS

on:
  push:
    branches:
      - dev
      - qa 
      - prod # Adjust the branch as needed

permissions:
  id-token: write
  contents: read

jobs:
  build-deploy:
    runs-on: self-hosted  # Use your self-hosted runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set environment variables
        run: |
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "NAMESPACE=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          if [[ "${GITHUB_REF#refs/heads/}" == "main" ]]; then
            echo "NAMESPACE=prod" >> $GITHUB_ENV
          fi

      - name: azure login
        run: |
          CLIENT_ID=$(az identity show --name VM-identity --resource-group DevOpsProject-rg --query clientId -o tsv)
          az login --identity --username $CLIENT_ID
          
      - name: Login to Azure Container Registry
        run: |
          TOKEN=$(az acr login --name devopsprojectlambtonregistry --expose-token --output tsv --query accessToken)
          echo $TOKEN | sudo docker login devopsprojectlambtonregistry.azurecr.io -u 00000000-0000-0000-0000-000000000000 --password-stdin

    #  - name: Login to ACR
    #    run: sudo az acr login -n devopsprojectlambtonregistry

      - name: Get Git Commit ID
        id: git_commit_id
        run: echo "commit_id=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build and push image to ACR
        run: |
          COMMIT_TAG=devopsprojectlambtonregistry.azurecr.io/myapp:${{ env.commit_id }}
          LATEST_TAG=devopsprojectlambtonregistry.azurecr.io/myapp:latest
          
          # Build the image
          sudo docker build -t $COMMIT_TAG -t $LATEST_TAG .
          
          # Push both tags
          sudo docker push $COMMIT_TAG
          sudo docker push $LATEST_TAG
          
      - name: Create namespace if not exists
        run: |
            kubectl get namespace ${{ env.NAMESPACE }} || kubectl create namespace ${{ env.NAMESPACE }}
      - name: Deploy to AKS
        run: |
          sed -i 's|{{IMAGE_TAG}}|${{ env.commit_id }}|g' k8s-manifest.yaml
          kubectl apply -f k8s-manifest.yaml -n ${{ env.NAMESPACE }}
          
      - name: Wait for LoadBalancer to be assigned
        run: |
            SERVICE_NAME=myapp-service
            NAMESPACE=dev
            echo "Waiting for LoadBalancer IP..."
            while [[ $(kubectl get svc $SERVICE_NAME -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}') == "" ]]; do
              sleep 10
            done
  
      - name: Get LoadBalancer URL
        id: get_loadbalancer_url
        run: |
            SERVICE_NAME=myapp-service
            NAMESPACE=dev
            LOAD_BALANCER_IP=$(kubectl get svc $SERVICE_NAME -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            echo "LoadBalancer URL: http://$LOAD_BALANCER_IP"
            echo "LOAD_BALANCER_URL=http://$LOAD_BALANCER_IP" >> $GITHUB_ENV
         
      - name: Send custom JSON data to Slack workflow
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
      # For posting a rich message using Block Kit
          payload: |
              {
                    "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                              }
                            }
                          ]
                          }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

